import proguard.gradle.ProGuardTask

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.guardsquare:proguard-gradle:7.3.2'
	}
}

plugins {
	id 'java'
	id 'application'
	id 'com.diffplug.spotless' version '6.18.0'
	id 'com.github.ben-manes.versions' version '0.46.0'
	id 'de.undercouch.download' version '5.4.0'
	id 'com.adarshr.test-logger' version '3.2.0'
}

repositories {
	mavenCentral()
}

String appName = 'solarsystem'
String version = '0.1.0'
String appDescription = 'A real-time solar system simulation.'
String author = 'Filippo Barbari'
String authorMail = 'filippo.barbari@gmail.com'
String mainClassName = 'com.ledmington.solarsystem.Launcher'
String fatJarPath = "${buildDir}/libs"
String fatJarName = "${fatJarPath}/${appName}.jar"
String shadowJarName = "${fatJarPath}/${appName}-${version}.jar"
String toolsDir = "${buildDir}/tools"
String distributionsDir = "${buildDir}/distributions"
String linuxArm64DistributionOutput = "${distributionsDir}/linux-aarch64"
String linuxArm64DistributionName = "${appName}-linux-aarch64.tar.gz"
String linuxArm32DistributionOutput = "${distributionsDir}/linux-arm"
String linuxArm32DistributionName = "${appName}-linux-arm.tar.gz"
String linuxX64DistributionOutput = "${distributionsDir}/linux-x64"
String linuxX64DistributionName = "${appName}-linux-x64.tar.gz"
String windows64DistributionOutput = "${distributionsDir}/windows-x64"
String windows64DistributionName = "${appName}-windows-x64.zip"
String windows32DistributionOutput = "${distributionsDir}/windows-x86_32"
String windows32DistributionName = "${appName}-windows-x86_32.zip"
String macosX64DistributionOutput = "${distributionsDir}/macos-x64"
String macosX64DistributionName = "${appName}-macos-x64.tar.gz"
String macosArm64DistributionOutput = "${distributionsDir}/macos-aarch64"
String macosArm64DistributionName = "${appName}-macos-aarch64.tar.gz"
String javaReleaseVersion = "17"

ext.asyncProfilerVersion = '2.9'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

ext.gdxVersion = '1.11.0'
ext.junitVersion = '5.9.3'
dependencies {
	// libGDX
	implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	runtimeOnly "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
	runtimeOnly "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"

	// utility stuff
	implementation 'com.google.guava:guava:31.1-jre'
	runtimeOnly 'org.apache.logging.log4j:log4j-core:2.20.0'

	// testing stuff
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

application {
	mainClass = "${mainClassName}"
}

run {
	jvmArgs = [
		"-XX:+TieredCompilation"
	]
}

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Xlint:all,-serial,-processing'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanBin')
tasks.register('cleanDLLs', Delete) {
	delete fileTree(dir: project.projectDir, include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) {
	delete fileTree(dir: project.projectDir, include: '*.dylib')
}
tasks.register('cleanLogs', Delete) {
	delete fileTree(dir: project.projectDir, include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) {
	delete fileTree(dir: project.projectDir, include: '*.so')
}
tasks.register('cleanBin', Delete) {
	delete "${project.projectDir}/bin"
}

spotless {
	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**', '**/bin/**'
		}
		removeUnusedImports()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
		setEncoding('utf-8')
		palantirJavaFormat('2.26.0')

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'com', 'org', group as String)

		licenseHeader String.join("\n",
			"/*",
			"* ${appName} - ${appDescription}",
			"* Copyright (C) 2023-${new Date().format('yyyy')} ${author} <${authorMail}>",
			"*",
			"* This program is free software: you can redistribute it and/or modify",
			"* it under the terms of the GNU General Public License as published by",
			"* the Free Software Foundation, either version 3 of the License, or",
			"* (at your option) any later version.",
			"*",
			"* This program is distributed in the hope that it will be useful,",
			"* but WITHOUT ANY WARRANTY; without even the implied warranty of",
			"* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
			"* GNU General Public License for more details.",
			"*",
			"* You should have received a copy of the GNU General Public License",
			"* along with this program.  If not, see <http://www.gnu.org/licenses/>.",
			"*/",
		)
	}
}

test {
	useJUnitPlatform()
	// failFast true
}

testlogger {
	theme 'standard'

	showExceptions true
	showStackTraces true
	showFullStackTraces false
	showCauses true

	slowThreshold 2000

	showSummary true
	showSimpleNames false
	showPassed true
	showSkipped true
	showFailed true
	showOnlySlow false

	showStandardStreams false
	showPassedStandardStreams true
	showSkippedStandardStreams true
	showFailedStandardStreams true
}

tasks.compileJava.dependsOn(spotlessApply)

tasks.register('fatJar', Jar) {
	group 'distribution'
	description 'Builds the fat jar of the application'
	outputs.file file(fatJarName)
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	manifest {
		archiveBaseName = appName
		attributes(
			"Implementation-Version": "${version}",
			"Main-Class": "${mainClassName}"
		)
	}

	doLast {
		println "The fat jar is ${fatJarName}"
		println String.format("Fat jar size: %.3f MB", new File(fatJarName).length() / 1024 / 1024)
	}
}

tasks.register('runProd', JavaExec) {
	dependsOn fatJar
	group 'Application'
	description 'Runs the fatJar'
	classpath fatJarName
	jvmArgs = [
		"-XX:+TieredCompilation"
	]
}

tasks.register('downloadBCV', Download) {
	src "https://github.com/Konloch/bytecode-viewer/releases/download/v2.11.2/Bytecode-Viewer-2.11.2.jar"
	dest new File(toolsDir, '/bcv.jar')
	overwrite false
}

tasks.register('decompile', JavaExec) {
	dependsOn([downloadBCV, shadowJar])
	group 'Utilities'
	description 'Decompiles the fat jar'
	classpath "${toolsDir}/bcv.jar"
	args = [
		shadowJarName
	]
}

tasks.register('detectModules', Exec) {
	dependsOn fatJar
	workingDir '.'
	commandLine([
		"jdeps",
		"--multi-release", "${javaReleaseVersion}",
		"--ignore-missing-deps",
		"--print-module-deps",
		"${fatJarName}"
	])
	standardOutput = new ByteArrayOutputStream()
	doLast {
		println "Detected modules: " + standardOutput.toString().strip()
		ext.detectedModules = standardOutput.toString().strip()
	}
}

tasks.register('shadowJar', ProGuardTask) {
	dependsOn([fatJar, detectModules])
	group 'distribution'
	description 'Obfuscates the fat Jar with Proguard'
	injars "${fatJarName}"
	outjars "${shadowJarName}"
	configuration "${project.rootDir}/conf/proguard.conf"

	doFirst {
		// Automatically handle the Java version of this build.
		if (System.getProperty('java.version').startsWith('1.')) {
			// Before Java 9, the runtime classes were packaged in a single jar file.
			libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
		} else {
			// As of Java 9, the runtime classes are packaged in modular jmod files.
			for(String module : detectModules.detectedModules.split(",")) {
				libraryjars "${System.getProperty('java.home')}/jmods/${module}.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
			}
			// libraryjars "${System.getProperty('java.home')}/jmods/java.logging.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
		}
	}

	verbose

	doLast {
		println "The shadow jar is ${shadowJarName}"
		println String.format("Shadow jar size: %.3f MB", new File("${shadowJarName}").length() / 1024 / 1024)
	}
}

tasks.register('downloadPackr', Download) {
	src "https://github.com/libgdx/packr/releases/download/4.0.0/packr-all-4.0.0.jar"
	dest new File(toolsDir, '/packr.jar')
	overwrite false
}

tasks.register('prepareLinuxX64Distribution', JavaExec) {
	dependsOn([shadowJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
		'--platform', 'linux64',
		'--jdk', "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_x64_linux_hotspot_17.0.7_7.tar.gz",
		'--useZgcIfSupportedOs',
		'--executable', 'solarsystem',
		'--classpath', "${shadowJarName}",
		'--mainclass', "${mainClassName}",
		'--vmargs', 'Xmx1G', 'Dresources.dir=./resources', "XX:+TieredCompilation",
		'--resources', 'src/main/resources',
		'--icon', "src/main/resources/images/icon.png",
		'--output', "${linuxX64DistributionOutput}"
	]
}

tasks.register('buildLinuxX64', Zip) {
	dependsOn prepareLinuxX64Distribution
	group 'distribution'
	description 'Zips the app distribution for Linux x64'
	archiveFileName = "${linuxX64DistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${linuxX64DistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Linux distribution is ${distributionsDir}/${linuxX64DistributionName}"
		println String.format("Linux distribution size: %.3f MB", new File("${distributionsDir}/${linuxX64DistributionName}").length() / 1024 / 1024)
	}
}

tasks.register('prepareLinuxArm64Distribution', JavaExec) {
	dependsOn([shadowJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
		'--platform', 'linux64',
		'--jdk', "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_aarch64_linux_hotspot_17.0.7_7.tar.gz",
		'--useZgcIfSupportedOs',
		'--executable', 'solarsystem',
		'--classpath', "${shadowJarName}",
		'--mainclass', "${mainClassName}",
		'--vmargs', 'Xmx1G', 'Dresources.dir=./resources', "XX:+TieredCompilation",
		'--resources', 'src/main/resources',
		'--icon', "src/main/resources/images/icon.png",
		'--output', "${linuxArm64DistributionOutput}"
	]
}

tasks.register('buildLinuxArm64', Zip) {
	dependsOn prepareLinuxArm64Distribution
	group 'distribution'
	description 'Zips the app distribution for Linux aarch64'
	archiveFileName = "${linuxArm64DistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${linuxArm64DistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Linux distribution is ${distributionsDir}/${linuxArm64DistributionName}"
		println String.format("Linux distribution size: %.3f MB", new File("${distributionsDir}/${linuxArm64DistributionName}").length() / 1024 / 1024)
	}
}

tasks.register('prepareLinuxArm32Distribution', JavaExec) {
	dependsOn([shadowJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
		'--platform', 'linux64',
		'--jdk', "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_arm_linux_hotspot_17.0.7_7.tar.gz",
		'--useZgcIfSupportedOs',
		'--executable', 'solarsystem',
		'--classpath', "${shadowJarName}",
		'--mainclass', "${mainClassName}",
		'--vmargs', 'Xmx1G', 'Dresources.dir=./resources', "XX:+TieredCompilation",
		'--resources', 'src/main/resources',
		'--icon', "src/main/resources/images/icon.png",
		'--output', "${linuxArm32DistributionOutput}"
	]
}

tasks.register('buildLinuxArm32', Zip) {
	dependsOn prepareLinuxArm32Distribution
	group 'distribution'
	description 'Zips the app distribution for Linux arm32'
	archiveFileName = "${linuxArm32DistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${linuxArm32DistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Linux distribution is ${distributionsDir}/${linuxArm32DistributionName}"
		println String.format("Linux distribution size: %.3f MB", new File("${distributionsDir}/${linuxArm32DistributionName}").length() / 1024 / 1024)
	}
}

tasks.register('prepareWindows64Distribution', JavaExec) {
	dependsOn([shadowJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
		'--platform', 'windows64',
		'--jdk', "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_x64_windows_hotspot_17.0.7_7.zip",
		'--useZgcIfSupportedOs',
		'--executable', 'solarsystem',
		'--classpath', "${shadowJarName}",
		'--mainclass', "${mainClassName}",
		'--vmargs', 'Xmx1G', 'Dresources.dir=./resources', "XX:+TieredCompilation",
		'--resources', 'src/main/resources',
		'--output', "${windows64DistributionOutput}"
	]
}

tasks.register('buildWindows64', Zip) {
	dependsOn prepareWindows64Distribution
	group 'distribution'
	description 'Zips the app distribution for Windows x64'
	archiveFileName = "${windows64DistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${windows64DistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Windows distribution is ${distributionsDir}/${windows64DistributionName}"
		println String.format("Windows distribution size: %.3f MB", new File("${distributionsDir}/${windows64DistributionName}").length() / 1024 / 1024)
	}
}

tasks.register('prepareWindows32Distribution', JavaExec) {
	dependsOn([shadowJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
		'--platform', 'windows64',
		'--jdk', "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_x86-32_windows_hotspot_17.0.7_7.zip",
		'--useZgcIfSupportedOs',
		'--executable', 'solarsystem',
		'--classpath', "${shadowJarName}",
		'--mainclass', "${mainClassName}",
		'--vmargs', 'Xmx1G', 'Dresources.dir=./resources', "XX:+TieredCompilation",
		'--resources', 'src/main/resources',
		'--output', "${windows32DistributionOutput}"
	]
}

tasks.register('buildWindows32', Zip) {
	dependsOn prepareWindows32Distribution
	group 'distribution'
	description 'Zips the app distribution for Windows x86-32'
	archiveFileName = "${windows32DistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${windows32DistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Windows distribution is ${distributionsDir}/${windows32DistributionName}"
		println String.format("Windows distribution size: %.3f MB", new File("${distributionsDir}/${windows32DistributionName}").length() / 1024 / 1024)
	}
}

tasks.register('prepareMacosX64Distribution', JavaExec) {
	dependsOn([shadowJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
		'--platform', 'mac',
		'--jdk', "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_x64_mac_hotspot_17.0.7_7.tar.gz",
		'--useZgcIfSupportedOs',
		'--executable', 'solarsystem',
		'--classpath', "${shadowJarName}",
		'--mainclass', "${mainClassName}",
		'--vmargs', 'Xmx1G', 'Dresources.dir=./resources', "XX:+TieredCompilation",
		'--resources', 'src/main/resources',
		'--output', "${macosX64DistributionOutput}"
	]
}

tasks.register('buildMacosX64', Zip) {
	dependsOn prepareMacosX64Distribution
	group 'distribution'
	description 'Zips the app distribution for Macos x64'
	archiveFileName = "${macosX64DistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${macosX64DistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Windows distribution is ${distributionsDir}/${macosX64DistributionName}"
		println String.format("Windows distribution size: %.3f MB", new File("${distributionsDir}/${macosX64DistributionName}").length() / 1024 / 1024)
	}
}

tasks.register('prepareMacosArm64Distribution', JavaExec) {
	dependsOn([shadowJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
		'--platform', 'mac',
		'--jdk', "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_aarch64_mac_hotspot_17.0.7_7.tar.gz",
		'--useZgcIfSupportedOs',
		'--executable', 'solarsystem',
		'--classpath', "${shadowJarName}",
		'--mainclass', "${mainClassName}",
		'--vmargs', 'Xmx1G', 'Dresources.dir=./resources', "XX:+TieredCompilation",
		'--resources', 'src/main/resources',
		'--output', "${macosArm64DistributionOutput}"
	]
}

tasks.register('buildMacosArm64', Zip) {
	dependsOn prepareMacosArm64Distribution
	group 'distribution'
	description 'Zips the app distribution for Macos aarch64'
	archiveFileName = "${macosArm64DistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${macosArm64DistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Windows distribution is ${distributionsDir}/${macosArm64DistributionName}"
		println String.format("Windows distribution size: %.3f MB", new File("${distributionsDir}/${macosArm64DistributionName}").length() / 1024 / 1024)
	}
}

tasks.build.dependsOn(buildLinuxX64)
tasks.build.dependsOn(buildLinuxArm64)
tasks.build.dependsOn(buildLinuxArm32)
tasks.build.dependsOn(buildWindows64)
tasks.build.dependsOn(buildWindows32)
tasks.build.dependsOn(buildMacosX64)
tasks.build.dependsOn(buildMacosArm64)

// utility function
static def getDate() {
	return new Date().format('yyyyMMddHHmmss')
}

tasks.register('downloadAsyncProfiler', Download) {
	src "https://github.com/async-profiler/async-profiler/releases/download/v${asyncProfilerVersion}/async-profiler-${asyncProfilerVersion}-linux-x64.tar.gz"
	dest new File(toolsDir, "async-profiler.tar.gz")
	overwrite false
}

tasks.register('asyncProfiler', Copy) {
	dependsOn downloadAsyncProfiler
	from tarTree(downloadAsyncProfiler.dest)
	into "${buildDir}/async-profiler/"
	includeEmptyDirs(false)
	ext {
		profiler = "${buildDir}/async-profiler/async-profiler-${asyncProfilerVersion}-linux-x64/build/libasyncProfiler.so"
	}
}

tasks.register('flamegraph', JavaExec) {
	dependsOn([asyncProfiler, fatJar])
	group 'Utilities'
	description 'Runs the app with async-profiler attached and generates a flamegraph'
	def flamegraphFile = "${buildDir}/flamegraphs/flamegraph-cpu-${getDate()}.html"
	doFirst {
		mkdir "${buildDir}/flamegraphs"
	}
	classpath fatJarName
	args = []
	jvmArgs = [
		"-agentpath:${asyncProfiler.profiler}=start,event=cpu,file=${flamegraphFile}"
	]
	doLast {
		println "Generated flamegraph ${flamegraphFile}"
	}
}
