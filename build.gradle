plugins {
	id 'java'
	id 'application'
	id 'com.diffplug.spotless' version '6.17.0'
	id 'com.github.ben-manes.versions' version '0.46.0'
	id 'de.undercouch.download' version '5.4.0'
}

repositories {
	mavenCentral()
}

String appName = 'solarsystem'
String version = '0.1.0'
String appDescription = 'A real-time solar system simulation.'
String author = 'Filippo Barbari'
String authorMail = 'filippo.barbari@gmail.com'
String mainClassName = 'com.ledmington.solarsystem.Launcher'
String fatJarPath = "${buildDir}/libs"
String fatJarName = "${fatJarPath}/${appName}.jar"
String toolsDir = "${buildDir}/tools"
String distributionsDir = "${buildDir}/distributions"
String linuxDistributionOutput = "${distributionsDir}/linux"
String linuxDistributionName = "${appName}-linux.tar.gz"

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

ext.gdxVersion = '1.11.0'
dependencies {
	// libGDX
	implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	runtimeOnly "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
	runtimeOnly "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"

	// utility stuff
	implementation 'com.google.guava:guava:31.1-jre'
}

application {
	mainClass = "${mainClassName}"
}


tasks.withType(JavaCompile).configureEach {
	options.compilerArgs << '-Xdiags:verbose'
	options.compilerArgs << '-Xlint:all,-serial,-processing'
	options.compilerArgs << '-Werror'
	options.deprecation = true
	options.encoding = 'UTF-8'
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanBin')
tasks.register('cleanDLLs', Delete) {
	delete fileTree(dir: project.projectDir, include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) {
	delete fileTree(dir: project.projectDir, include: '*.dylib')
}
tasks.register('cleanLogs', Delete) {
	delete fileTree(dir: project.projectDir, include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) {
	delete fileTree(dir: project.projectDir, include: '*.so')
}
tasks.register('cleanBin', Delete) {
	delete "${project.projectDir}/bin"
}

spotless {
	format 'misc', {
		target '*.gradle', '*.md', '.gitignore'
		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
		setEncoding('utf-8')
	}

	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**', '**/bin/**'
		}
		removeUnusedImports()
		formatAnnotations()
		trimTrailingWhitespace()
		endWithNewline()
		setEncoding('utf-8')
		palantirJavaFormat('2.26.0')

		// check https://javadoc.io/doc/com.diffplug.spotless/spotless-plugin-gradle/latest/com/diffplug/gradle/spotless/JavaExtension.html
		importOrder('java', 'javax', 'javafx', 'com', 'org', group as String)

		licenseHeader String.join("\n",
			"/*",
			"* ${appName} - ${appDescription}",
			"* Copyright (C) 2023-${new Date().format('yyyy')} ${author} <${authorMail}>",
			"*",
			"* This program is free software: you can redistribute it and/or modify",
			"* it under the terms of the GNU General Public License as published by",
			"* the Free Software Foundation, either version 3 of the License, or",
			"* (at your option) any later version.",
			"*",
			"* This program is distributed in the hope that it will be useful,",
			"* but WITHOUT ANY WARRANTY; without even the implied warranty of",
			"* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
			"* GNU General Public License for more details.",
			"*",
			"* You should have received a copy of the GNU General Public License",
			"* along with this program.  If not, see <http://www.gnu.org/licenses/>.",
			"*/",
		)
	}
}

tasks.compileJava.dependsOn(spotlessApply)

tasks.register('fatJar', Jar) {
	group 'distribution'
	description 'Builds the fat jar of the application'
	from sourceSets.main.output
	dependsOn configurations.runtimeClasspath
	from {
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	manifest {
		archiveBaseName = appName
		attributes(
				"Implementation-Version": "${version}",
				"Main-Class": "${mainClassName}"
		)
	}

	doLast {
		println "The fat jar is ${fatJarName}"
		println String.format("Fat jar size: %.3f MB", new File(fatJarName).length() / 1024 / 1024)
	}
}

tasks.register('downloadPackr', Download) {
	src "https://github.com/libgdx/packr/releases/download/4.0.0/packr-all-4.0.0.jar"
	dest new File(toolsDir, '/packr.jar')
	overwrite false
}

tasks.register('prepareLinuxDistribution', JavaExec) {
	dependsOn([fatJar, downloadPackr])
	group 'distribution'
	classpath './build/tools/packr.jar'
	args = [
			'--platform', 'linux64',
			'--jdk', 'https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jre_x64_linux_hotspot_17.0.7_7.tar.gz',
			'--useZgcIfSupportedOs',
			'--executable', 'solarsystem',
			'--classpath', "${fatJarName}",
			'--mainclass', "${mainClassName}",
			'--vmargs', 'Xmx1G', 'Dresources.dir=./resources',
			'--resources', 'src/main/resources',
			'--output', "${linuxDistributionOutput}"
	]
}

tasks.register('buildLinux', Zip) {
	dependsOn prepareLinuxDistribution
	group 'distribution'
	description 'Zips the app distribution for Linux'
	archiveFileName = "${linuxDistributionName}"
	destinationDirectory = new File("${distributionsDir}")
	from("${linuxDistributionOutput}") {
		//include('**.sh')
		//include('**/java')
		include ("**/*")
		fileMode 0755
	}
	doLast {
		println "Linux distribution is ${distributionsDir}/${linuxDistributionName}"
		println String.format("Linux distribution size: %.3f MB", new File("${distributionsDir}/${linuxDistributionName}").length() / 1024 / 1024)
	}
}

tasks.build.dependsOn(buildLinux)
